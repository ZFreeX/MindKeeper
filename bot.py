#!/usr/bin/env python
# -*- coding: utf-8 -*-
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, ParseMode, CallbackQuery
import asyncio
import sqlite3 as sql
import random
from aiogram.utils.markdown import text, bold, italic, code, pre
from bs4 import BeautifulSoup
import urllib.request
from urllib.parse import quote
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split


bot = Bot(token="5216070611:AAGdv9ZSiAeZ8NstQLlYBvtIZMHQmbocuNc")
dp = Dispatcher(bot)

keys = {"1": "programming", "2": "informatics", "3": "biology", "4": "physics"}


print("we are wok")

coolarts = [1, 3, 9, 10, 69, 137, 152, 172, 177, 181, 391, 411, 425, 426, 438, 452, 460, 467, 489, 493]




async def task():
    con = sql.connect("users.db")
    cur = con.cursor()
    cur.execute("SELECT * FROM `users`")

    #programming books
    url = "https://labirint.ru"
    link = "https://www.labirint.ru/genres/2308/?page="
    link += str(random.randint(1, 17))
    req = urllib.request.urlopen(link)
    req = req.read()

    soup = BeautifulSoup(req, "html.parser")
    items = soup.select("a.cover")
    i = random.randint(0, len(items)-1)
    s = items[i].get("title")
    title1 = s[s.find("-")+2:].replace("'", "")
    h1 = url + items[i].get("href")

    #physics books
    url = "https://aldebaran.ru"
    link = "https://aldebaran.ru/genre/nauka_obrazovanie/fizika/pagenum-"+str(random.randint(1,15))
    link = urllib.request.Request(link, headers={'User-Agent' : "Magic Browser"})
    req = urllib.request.urlopen(link)
    req = req.read()
    soup = BeautifulSoup(req, "html.parser")
    items = soup.select("p.booktitle a")
    i = random.randint(0, len(items) - 1)
    title2 = items[i].get_text().replace("'", "")
    h2 = url + items[i].get("href")

    #biology articles
    url = "https://biomolecula.ru"
    link = url + "/articles?page="+str(random.randint(1, 20))
    req = urllib.request.urlopen(link)
    req = req.read()
    soup = BeautifulSoup(req, "html.parser")
    items = soup.select("a.article-item_title")
    i = random.randint(0, len(items) - 1)
    title3 = items[i].get_text().replace("'", "")
    h3 = url + items[i].get("href")

    #informatics articles
    url = "https://ru.algorithmica.org"
    req = urllib.request.urlopen(url)
    req = req.read()
    soup = BeautifulSoup(req, "html.parser")
    items = soup.select("a")
    i = random.randint(0, len(items) - 1)
    title4 = items[i].get_text().replace("'", "")
    h4 = items[i].get("href")

    rows = cur.fetchall()
    for row in rows:
        if row[2] == 0:
            continue
        fs = [] #—Å–ø–∏—Å–æ–∫
        sent = False
        cur.execute(f"SELECT * FROM `{row[0]}`")
        curs = cur.fetchall()
        headers = [x[0] for x in curs]
        y = [x[1] for x in curs]
        if len(headers) == 0 or len(y) == 0:
            continue
        vectorizer = TfidfVectorizer(analyzer="char_wb", ngram_range=(2, 3))
        X = vectorizer.fit_transform(headers)
        clf = SVC(probability=True)
        clf.fit(X, y)
        print("–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å: ", title1, sep=" ")
        zz = clf.predict_proba(vectorizer.transform([title1]))
        f = zz[0][0]
        ff = round(f, 2)
        fff = ff * 100
        z = clf.predict(vectorizer.transform([title1]))
        print(z)
        print("result: ", fff, "%", sep=" ")
        #####valid test
        # scores = []
        # for i in range(10):
        #     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)
        #
        #     clf2 = LogisticRegression(random_state=0)
        #     clf2.fit(X_train, y_train)
        #     score = clf2.score(X_test, y_test)
        #     scores.append(score)
        # t = sum(scores)/len(scores)
        # tt = round(t, 2)
        # print("VALID FOR ", 100*tt, sep=" ")
        ####
        fs.append((fff, title1, h1, "programming"))
        if z == "–î–∞z":
            t = "üîÆ <b>" + title1 + "</b>\n\n"
            t += "üìç –û–±–ª–∞—Å—Ç—å: <i>"
            t += "" \
                 "programming</i>"
            t += "\nüîé –°—Å—ã–ª–∫–∞: " + h1
            if t[len(t) - 1] != '/':
                t += '/'
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ üü¢", callback_data="yes"))
            kb.add(InlineKeyboardButton("–ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üî¥", callback_data="no"))
            await bot.send_message(row[0], t, reply_markup=kb, parse_mode=ParseMode.HTML)
            sent = True

        print("–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å: ", title2, sep=" ")
        zz = clf.predict_proba(vectorizer.transform([title2]))
        f = zz[0][0]
        ff = round(f, 2)
        fff = ff * 100
        z = clf.predict(vectorizer.transform([title2]))
        print(z)
        print("result: ", fff, "%", sep=" ")
        fs.append((fff, title2, h2, "physics"))

        # #####valid test
        # scores = []
        # for i in range(10):
        #     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)
        #
        #     clf2 = LogisticRegression(random_state=0)
        #     clf2.fit(X_train, y_train)
        #     score = clf2.score(X_test, y_test)
        #     scores.append(score)
        # t = sum(scores) / len(scores)
        # tt = round(t, 2)
        # print("VALID FOR ", 100 * tt, sep=" ")
        ####

        if z == "–î–∞z":
            t = "üîÆ <b>" + title2 + "</b>\n\n"
            t += "üìç –û–±–ª–∞—Å—Ç—å: <i>"
            t += "" \
                 "physics</i>"
            t += "\nüîé –°—Å—ã–ª–∫–∞: " + h2
            if t[len(t) - 1] != '/':
                t += '/'
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ üü¢", callback_data="yes"))
            kb.add(InlineKeyboardButton("–ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üî¥", callback_data="no"))
            await bot.send_message(row[0], t, reply_markup=kb, parse_mode=ParseMode.HTML)
            sent = True

        print("–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å: ", title3, sep=" ")
        zz = clf.predict_proba(vectorizer.transform([title3]))
        f = zz[0][0]
        ff = round(f, 2)
        fff = ff * 100
        z = clf.predict(vectorizer.transform([title3]))
        print(z)
        print("result: ", fff, "%", sep=" ")
        fs.append((fff, title3, h3, "biology"))
        # #####valid test
        # scores = []
        # for i in range(10):
        #     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)
        #
        #     clf2 = LogisticRegression(random_state=0)
        #     clf2.fit(X_train, y_train)
        #     score = clf2.score(X_test, y_test)
        #     scores.append(score)
        # t = sum(scores) / len(scores)
        # tt = round(t, 2)
        # print("VALID FOR ", 100 * tt, sep=" ")
        ####
        if z == "–î–∞z":
            t = "üîÆ <b>" + title3 + "</b>\n\n"
            t += "üìç –û–±–ª–∞—Å—Ç—å: <i>"
            t += "" \
                 "biology</i>"
            t += "\nüîé –°—Å—ã–ª–∫–∞: " + h3
            if t[len(t) - 1] != '/':
                t += '/'
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ üü¢", callback_data="yes"))
            kb.add(InlineKeyboardButton("–ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üî¥", callback_data="no"))
            await bot.send_message(row[0], t, reply_markup=kb, parse_mode=ParseMode.HTML)
            sent = True

        print("–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å: ", title4, sep=" ")
        zz = clf.predict_proba(vectorizer.transform([title4]))
        f = zz[0][0]
        ff = round(f, 2)
        fff = ff * 100
        z = clf.predict(vectorizer.transform([title4]))
        print(z)
        print("result: ", fff, "%", sep=" ")
        fs.append((fff, title4, h4, "informatics"))
        #####valid test
        scores = []
        # for i in range(10):
        #     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)
        #
        #     clf2 = LogisticRegression(random_state=0)
        #     clf2.fit(X_train, y_train)
        #     score = clf2.score(X_test, y_test)
        #     scores.append(score)
        # t = sum(scores) / len(scores)
        # tt = round(t, 2)
        # print("VALID FOR ", 100 * tt, sep=" ")
        ####
        if z == "–î–∞z" and h4 != None:
            t = "üîÆ <b>" + title4 + "</b>\n\n"
            t += "üìç –û–±–ª–∞—Å—Ç—å: <i>"
            t += "" \
                 "informatics</i>"
            t += "\nüîé –°—Å—ã–ª–∫–∞: " + h4
            if t[len(t) - 1] != '/':
                t += '/'
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ üü¢", callback_data="yes"))
            kb.add(InlineKeyboardButton("–ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üî¥", callback_data="no"))
            await bot.send_message(row[0], t, reply_markup=kb, parse_mode=ParseMode.HTML)
            sent = True
        if sent == False:
            print("emergency comparing...")
            fs.sort(key=lambda x: -x[0])
            t = "üîÆ <b>" + fs[0][1] + "</b>\n\n"
            t += "üìç –û–±–ª–∞—Å—Ç—å: <i>"
            t += "" \
                 f"{fs[0][3]}</i>"
            t += "\nüîé –°—Å—ã–ª–∫–∞: " + fs[0][2]
            if t[len(t) - 1] != '/':
                t += '/'
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ üü¢", callback_data="yes"))
            kb.add(InlineKeyboardButton("–ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üî¥", callback_data="no"))
            await bot.send_message(row[0], t, reply_markup=kb, parse_mode=ParseMode.HTML)
            t = "üîÆ <b>" + fs[1][1] + "</b>\n\n"
            t += "üìç –û–±–ª–∞—Å—Ç—å: <i>"
            t += "" \
                 f"{fs[1][3]}</i>"
            t += "\nüîé –°—Å—ã–ª–∫–∞: " + fs[1][2]
            if t[len(t) - 1] != '/':
                t += '/'
            await bot.send_message(row[0], t, reply_markup=kb, parse_mode=ParseMode.HTML)







@dp.message_handler(commands=['start'])
async def process(msg: types.Message):
    mk = ReplyKeyboardMarkup(resize_keyboard=True)
    mk.add(KeyboardButton("–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã üî•"), KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"))
    mk.add("–û—á–∏—Å—Ç–∏—Ç—å üß®")
    await bot.send_message(msg.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ö–ª–∏–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É '–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã üî•'\n\n‚õì –ü–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ –ø–µ—Ä–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –∏ –∫–Ω–∏–≥ –≤–∫–ª—é—á–∏ —Ä–∞—Å—Å—ã–ª–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!\n\n‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±—É—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –ø–æ –∫–Ω–æ–ø–∫–µ '–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã üî•'\n\n –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π /help!", reply_markup=mk)
    con = sql.connect("users.db")
    cur = con.cursor()
    cur.execute("CREATE TABLE IF NOT EXISTS `users`(`id` INTEGER, `interests` STRING, `mode` INTEGER)")
    cur.execute("SELECT * FROM `users`")
    rows = cur.fetchall()
    y = False
    for row in rows:
        if row[0] == msg.from_user.id:
            y = True

    if y == False:
        cur.execute(f"INSERT INTO `users` values('{msg.from_user.id}', 'default', '0')")

    con.commit()
    cur.close()


@dp.message_handler(commands=['help'])
async def help(msg: types.Message):
    await bot.send_message(msg.from_user.id, "üìÆ –ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å <b>–∫–Ω–∏–≥–∏</b> –∏ <b>—Å—Ç–∞—Ç—å–∏</b> –Ω–∞ –æ—Å–Ω–æ–≤–µ <b>–∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤</b>, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.\n\nüìä –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π:\n<i>‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n‚Ä¢ –ë–∏–æ–ª–æ–≥–∏—è\n‚Ä¢ –§–∏–∑–∏–∫–∞\n‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã</i>\n\n–°–ø–∏—Å–æ–∫ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ–º—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è.\n\n–°—Ç–∞—Ä—Ç —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:\n1. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã üî•'\n2. –ü–æ–ª—É—á–∏—Ç—å 20 —Å—Ç–∞—Ç–µ–π/–∫–Ω–∏–≥\n3. –†–∞–∑–¥–µ–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ.\n4. –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ <b>–ø—É–Ω–∫—Ç–∞ 3</b> —Å–æ–∑–¥–∞—Å—Ç –ø–æ—á–≤—É –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏, –∏ –±–æ—Ç –Ω–∞—á–Ω–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—Ç–∞—Ç—å–∏ –∏ –∫–Ω–∏–≥–∏.\n5. –û—Ü–µ–Ω–∫–∞ –∫–∞–∂–¥–æ–π —Å–≤–µ–∂–µ–ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏/–∫–Ω–∏–≥–∏ –¥–µ–ª–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º–∏, –Ω–µ –ø—Ä–µ–Ω–µ–±—Ä–µ–≥–∞–π —ç—Ç–∏–º :)\n\nüõ° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:\n–ü–æ –∑–∞–¥—É–º–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–µ <b>12 —á–∞—Å–æ–≤</b>, –Ω–æ –Ω–∞ –º–æ–º–µ–Ω—Ç —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ—Ä—ã–≤ —Å–Ω–∏–∂–µ–Ω –¥–æ <b>10 –º–∏–Ω—É—Ç</b>. –ò–Ω–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–±–µ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –Ω–æ–≤—ã–º –¥–ª—è —Ç–µ–±—è –∏ —Ä–µ–¥–∫–æ –≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å –¥–æ —ç—Ç–æ–≥–æ —Å—Ä–µ–¥–∏ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ –∫—Ä—É–≥–æ–∑–æ—Ä–∞ :)\n\n‚öôÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n\n üë§ Author: @ZFreeX"
                                             "", parse_mode=ParseMode.HTML)




@dp.callback_query_handler(lambda c: c.data == "delete")
async def proccess(callback_query: CallbackQuery):
    con = sql.connect("users.db")
    cur = con.cursor()
    cur.execute(f"DELETE FROM `{callback_query.from_user.id}`")
    await callback_query.message.edit_text("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üåÄ")
    cur.execute(f"UPDATE `users` SET interests = 'default' WHERE id ={callback_query.from_user.id}")
    con.commit()
    cur.close()


@dp.callback_query_handler(lambda c: c.data == 'yes')
async def process_callback_button1(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text("üí• –û—Ü–µ–Ω–µ–Ω–æ!\n"+callback_query.message.text)
    #–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    s = callback_query.message.text
    caption = s[2:s.find("\n")]
    con = sql.connect("users.db")
    cur = con.cursor()
    cur.execute(f"INSERT INTO `{callback_query.from_user.id}` values('{caption}', '–î–∞')")
    con.commit()
    cur.close()


@dp.callback_query_handler(lambda c: c.data == 'no')
async def process_callback_button1(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text("üí• –û—Ü–µ–Ω–µ–Ω–æ!\n"+callback_query.message.text)
    s = callback_query.message.text
    caption = s[2:s.find("\n")]
    con = sql.connect("users.db")
    cur = con.cursor()
    cur.execute(f"INSERT INTO `{callback_query.from_user.id}` values('{caption}', '–ù–µ—Ç')")
    con.commit()
    cur.close()


@dp.message_handler(commands=['id'])
async def m(msg: types.Message):
    await bot.send_message(msg.from_user.id, msg.from_user.id)

@dp.message_handler(commands=['task'])
async def m(msg: types.Message):
    await task()
    await bot.send_message(msg.from_user.id, "completed. ")


@dp.message_handler(commands=['change'])
async def proc(msg: types.Message):
    con = sql.connect("users.db")
    cur = con.cursor()
    cur.execute("SELECT * FROM `users`")
    rows = cur.fetchall()

    for row in rows:
        if row[0] == msg.from_user.id:
            mode = row[2]

    if mode == 0:
        mode = 1
    else:
        mode = 0
    cur.execute(f"UPDATE `users` SET mode = {mode} WHERE id = {msg.from_user.id}")
    await bot.send_message(msg.from_user.id, "–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω. ")
    con.commit()
    cur.close()


#–ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

@dp.message_handler()
async def process(msg: types.Message):
    if msg.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è":
        con = sql.connect("users.db")
        cur = con.cursor()
        cur.execute("SELECT * FROM `users`")
        rows = cur.fetchall()

        for row in rows:
            if row[0] == msg.from_user.id:
                mode = row[2]

        #bt1 = InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å —Ä–µ–∂–∏–º üß¨", callback_data="change_{}".format(msg.from_used.id))
        #kb = InlineKeyboardMarkup().add(bt1)
        if mode == 0:
            s = italic("—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå")
        else:
            s = italic("—Ä–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ")
        await bot.send_message(msg.from_user.id, "üîë –¢–≤–æ–π —Ä–µ–∂–∏–º: {}\n/change - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è. ".format(s), parse_mode=ParseMode.MARKDOWN)
        cur.close()
    elif msg.text == "–û—á–∏—Å—Ç–∏—Ç—å üß®":
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ üö´", callback_data="delete"))
        await bot.send_message(msg.from_user.id, "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç –≤—Å–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±–æ—Ç—É. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=kb)
    elif msg.text == "–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã üî•":
        con = sql.connect("users.db")
        cur = con.cursor()
        cur.execute("SELECT * FROM `users`")
        rows = cur.fetchall()

        for row in rows:
            if row[0] == msg.from_user.id:
                s = row[1]


        if s == "default":
            await bot.send_message(msg.from_user.id, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –∑–Ω–∞–ª —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —Ç—ã –ø–æ–ª—É—á–∏—à—å 20 —Å—Ç–∞—Ç–µ–π/–∫–Ω–∏–≥, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—à—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã - –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ. ")
            ind = 0
            con2 = sql.connect("new_articles.db")
            cur2 = con2.cursor()
            cur2.execute("SELECT * FROM `articles`")
            cur.execute(f"CREATE TABLE IF NOT EXISTS `{msg.from_user.id}`('title' STRING, 'intent' STRING)")
            rows = cur2.fetchall()
            k = 0
            for row in rows:
                k += 1
                if ind >= len(coolarts):
                    break
                if k == coolarts[ind]:
                    ind += 1

                    t = "üîÆ <b>"+row[0] + "</b>\n\n"
                    t += "üìç –û–±–ª–∞—Å—Ç—å: <i>"
                    t += italic(row[3])+"</i>"
                    t += "\nüîé –°—Å—ã–ª–∫–∞: " + row[2]
                    if t[len(t)-1] != '/':
                        t += '/'
                    kb = InlineKeyboardMarkup()
                    kb.add(InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ üü¢", callback_data="yes"))
                    kb.add(InlineKeyboardButton("–ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üî¥", callback_data="no"))
                    await bot.send_message(msg.from_user.id, t, reply_markup=kb, parse_mode=ParseMode.HTML)
            con2.commit()
            cur2.close()

            cur.execute(f"UPDATE `users` SET interests = 'accepted' WHERE id = {msg.from_user.id}")
        else:
            await bot.send_message(msg.from_user.id, "üëã –¢–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É–∂–µ –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ñ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ :)")


        con.commit()
        cur.close()


#DELAY = 12*3600
DELAY = 10


def repeat(coro, loop):
    asyncio.ensure_future(coro(), loop=loop)
    loop.call_later(DELAY, repeat, coro, loop)

async def func():
    await task()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.call_later(DELAY, repeat, func, loop)
    executor.start_polling(dp)

